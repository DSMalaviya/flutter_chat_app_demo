import 'dart:developer';

import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter_chat_demo/models/chat_model.dart';

class FireStoreHelper {
  FireStoreHelper._();

  static FireStoreHelper get getInstance => FireStoreHelper._();

  final firestore = FirebaseFirestore.instance;
  final storageRef = FirebaseStorage.instance.ref();

  Future<void> addUserData(
      {required String userEmail,
      required String userId,
      required String userImageUrl}) async {
    //if user already exists than replace with new data
    QuerySnapshot result = await firestore
        .collection("Users")
        .where('userEmail', isEqualTo: userEmail)
        .get();
    if (result.size >= 1) {
      firestore.collection("Users").doc(result.docs[0].id).update({
        'userEmail': userEmail,
        'userId': userId,
        'userImageUrl': userImageUrl
      });
    } else {
      await firestore.collection("Users").add({
        'userEmail': userEmail,
        'userId': userId,
        'userImageUrl': userImageUrl
      });
    }
  }

  Future<QuerySnapshot> getUserData(String registeredEmail) async {
    return await firestore
        .collection("Users")
        .where('userEmail', isNotEqualTo: registeredEmail)
        .get();
  }

  Future<String> generateChatId(String user1Id, String user2Id) async {
    //generate unique chat id in chats
    final autoGeneratedId = firestore.collection("Chats").doc();
    log(autoGeneratedId.id);

    //for 1st user
    QuerySnapshot result = await firestore
        .collection("Users")
        .where('userId', isEqualTo: user1Id)
        .get();
    await firestore
        .collection("Users")
        .doc(result.docs[0].id)
        .update({user2Id: autoGeneratedId.id});

    //for second user
    QuerySnapshot result2 = await firestore
        .collection("Users")
        .where('userId', isEqualTo: user2Id)
        .get();
    await firestore
        .collection("Users")
        .doc(result2.docs[0].id)
        .update({user1Id: autoGeneratedId.id});

    return autoGeneratedId.id;
  }

  Future<void> addChat(
      {required String chatId,
      required String from,
      required String to,
      required String content}) async {
    ChatModel chatmodel = ChatModel(
        from: from,
        to: to,
        time: DateTime.now().toUtc().toIso8601String(),
        content: content,
        type: 1);

    // await firestore
    //     .collection(firestore.collection("Chats").doc(chatId).path)
    //     .add(chatmodel.toMap());

    await firestore
        .collection("Chats")
        .doc(chatId)
        .collection("allCharts")
        .add(chatmodel.toMap());
  }

  Stream<QuerySnapshot<Map<String, dynamic>>> getStreamOfChats(
      {required String chatId}) {
    return firestore
        .collection("Chats")
        .doc(chatId)
        .collection("allCharts")
        .snapshots();
  }

  Future<void> addPicture(
      {required String chatId,
      required String from,
      required String to,
      required String filePath}) async {
    final imgRef = storageRef
        .child("$chatId/${DateTime.now().toUtc().toIso8601String()}.jpg");
    File file = File(filePath);
    await imgRef.putFile(file);
    String linkOfImg = await imgRef.getDownloadURL();

    ChatModel chatmodel = ChatModel(
        from: from,
        to: to,
        time: DateTime.now().toUtc().toIso8601String(),
        content: linkOfImg,
        type: 2);

    await firestore
        .collection("Chats")
        .doc(chatId)
        .collection("allCharts")
        .add(chatmodel.toMap());
  }
}
